@inject FitnessDataService DataService;
@inject IJSRuntime JSRuntime;

<EditForm EditContext="@Context" OnValidSubmit="SaveMembership" @onreset="InitModel">
    <DataAnnotationsValidator />
    <div class="form-row">
        <div class="form-group col-12">
            <label>Name</label>
            <InputText @bind-Value="TempMembership.Name" class="form-control" />
            <ValidationMessage For="@(() => TempMembership.Name)" />
        </div>
        <div class="form-group col-12 col-md-6">
            <label>Price</label>
            <InputNumber @bind-Value="TempMembership.Price" class="form-control" />
            <ValidationMessage For="@(() => TempMembership.Price)" />
        </div>
        <div class="form-group col-12 col-md-6">
            <label>Valid for # days</label>
            <InputNumber @bind-Value="TempMembership.ValidForDays" class="form-control" />
            <ValidationMessage For="@(() => TempMembership.ValidForDays)" />
        </div>
        <div class="form-group col-12 col-md-6">
            <label>Valid for # enteries</label>
            <InputNumber @bind-Value="TempMembership.ValidForEnteries" class="form-control" />
            <ValidationMessage For="@(() => TempMembership.ValidForEnteries)" />
        </div>
        <div class="form-group col-12 col-md-6">
            <label>Valid # per day</label>
            <InputNumber @bind-Value="TempMembership.ValidPerDay" class="form-control" />
            <ValidationMessage For="@(() => TempMembership.ValidPerDay)" />
        </div>
            <div class="form-group col-12">
        <label>Role</label>
        <select class="form-control" @bind="@TempMembership.ValidForGymId">
            <option value="0">
                None
            </option>
            @foreach (var gym in Gyms ?? Enumerable.Empty<Gym>())
            {
                <option value="@gym.Id">
                    @gym.Name
                </option>
            }
        </select>
    </div>
    </div>
    <ValidationSummary />
    <div class="text-center">
        <button type="submit" class="btn btn-success mr-2">Save</button>
        <button type="reset" class="btn btn-secondary mr-2">Reset</button>
        @if (TempMembership.Id != 0)
        {
            @if (TempMembership.IsDeleted)
            {
                <button type="button" class="btn btn-primary mr-2" @onclick="UnDeleteMembership">
                    <span class="mr-2 oi oi-reload" aria-hidden="true"></span>Restore
                </button>
            }
            else
            {
                <button type="button" class="btn btn-danger mr-2" @onclick="DeleteMembership">
                    <span class="oi oi-trash" aria-hidden="true"></span>Restore
                </button>
            }
        }
    </div>
</EditForm>

@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public Pass Membership { get; set; }

    private List<Gym> Gyms { get; set; }

    private Pass TempMembership { get; set; }

    private EditContext Context { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.InitModel();
        this.Gyms = await DataService.GetGymsAsync();
    }

    private void InitModel()
    {
        TempMembership = new Pass()
        {
            Id = Membership.Id,
            Name = Membership.Name,
            Price = Membership.Price,
            ValidForDays = Membership.ValidForDays,
            ValidForEnteries = Membership.ValidForEnteries,
            ValidForGymId = Membership.ValidForGymId,
            ValidFrom = Membership.ValidFrom,
            ValidUntil = Membership.ValidUntil,
            ValidPerDay = Membership.ValidPerDay,
            IsDeleted = Membership.IsDeleted
        };

        this.Context = new EditContext(TempMembership);
    }

    private async Task SaveMembership()
    {
        string error = null;

        if (TempMembership.Id != 0)
        {
            await DataService.UpdatePassAsync(TempMembership);
        }
        else
        {
            if (!await DataService.TryAddPassAsync(TempMembership))
            {
                error = "Create error";
            }
        }

        if (!String.IsNullOrEmpty(error))
        {
            await JSRuntime.InvokeVoidAsync("alert", error);
        }
        else
        {
            await ModalInstance.CloseAsync();
        }
    }

    private async Task DeleteMembership()
    {
        TempMembership.IsDeleted = true;
        await this.SaveMembership();
    }

        private async Task UnDeleteMembership()
    {
        TempMembership.IsDeleted = false;
        await this.SaveMembership();
    }
}